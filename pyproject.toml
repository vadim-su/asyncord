[build-system]
requires = ["pdm-backend", "gitpython>=3.1.43"]
build-backend = "pdm.backend"

[project]
name = "asyncord"
description = "A smart and powerful base for creating discord bots and interaction with the API."
authors = [{ name = "Vadim Suharnikov", email = "vsuharnikov@gmail.com" }]
urls = { homepage = "https://github.com/suharnikov/asyncord", repository = "https://github.com/suharnikov/asyncord" }

readme = "README.md"
license = { text = "MIT" }

requires-python = ">=3.12.0"
dependencies = [
    "yarl>=1.8.1",
    "sentinel>=1.0.0",
    "rich>=12.5.1",
    "pydantic>=2.4.2",
    "aiohttp<4",
    "filetype>=1.2.0",
    "fbenum>=1.0.1",
]

dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "pre-commit>=3.3.2",
    "ruff>=0.4.4",
    "gitpython>=3.1.43",
]
testing = [
    "pytest>=7.3.1",
    "pytest-asyncio>=0.19.0",
    "pytest-pretty>=1.2.0",
    "pytest-mock>=3.12.0",
]
docs = [
    "mkdocs-material>=9.5.23",
    "mkdocstrings[python]>=0.25.1",
]

[tool.pdm.version]
source = "call"
getter = "scritps.version:get_version"

[tool.pdm.scripts]
docs = "mkdocs serve -f docs/mkdocs.yml"
build-docs = "mkdocs build -f docs/mkdocs.yml"

[tool.pytest.ini_options]
minversion = "6.2"
addopts = "-ra"
asyncio_mode = "auto"
testpaths = ["tests"]

[tool.isort]
line_length = 110
multi_line_output = 3
include_trailing_comma = true
length_sort = true

[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py312"
extend-exclude = [
    ".git",
    ".vscode",
    ".devcontainer",
    ".github",
    ".venv",
]

[tool.ruff.lint]
preview = true
select = [
    # Pyflakes
    "F",
    # Pycodestyle
    "D",
    "E",
    "W",
    # isort
    "I",
    # pep8-naming
    "N",
    # flake8-bugbear
    "B",
    # pyupgrade
    "UP",
    # flake8-annotations
    "ANN",
    # flake8-bandit
    "S",
    # flake8-commas
    "COM",
    # flake8-datetimez
    "DTZ",
    # flake8-future-annotations
    "FA",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-logging-format
    "G",
    # implicit-namespace-package
    "INP001",
    # flake8-pie
    "PIE",
    # flake8-print
    "T20",
    # flake8-pyi
    "PYI",
    # flake8-pytest-style
    "PT",
    # flake8-quotes
    "Q",
    # flake8-raise
    "RSE",
    # flake8-return
    "RET",
    # flake8-self
    "SLF",
    # flake8-simplify
    "SIM",
    # flake8-tidy-imports
    "TID",
    # flake8-type-checking
    "TCH",
    # flake8-use-pathlib
    "PTH",
    # eradicate
    "ERA",
    # Pylint
    "PL",
    # Ruff-specific rules
    "RUF",
]

ignore = [
    # https://github.com/charliermarsh/ruff/discussions/4542
    # Missing type annotation for {name} in method
    "ANN101",
    "ANN102",
    # Package dosctring check
    "D104",
    # Checks for string literals that are explicitly concatenated (using `+` operator)
    'ISC003',
    # Private member accessed
    'SLF001',
    # First argument of a method should be named `self`
    "N805",
    # It's not work properly for pydantic models
    # Move standard library import `datetime` into a type-checking block
    "TCH001",
    "TCH002",
    "TCH003",
    # Ternary operator make code less readable
    # Use ternary operator {} instead of `if`-`else`-
    "SIM108",
    # Use a single `if` statement instead of nested `if` statementsRuff
    "SIM102",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    # Allow missing module docstring
    "D100",
    # Allow asserts in tests
    "S101",
    # Allow pseudorandom number generator in tests. We do not make any cryptographic operations in tests
    "S311",
    # Checks for iterations over set literals is wrong. Set fits better than list on iteration by values
    "PLC0208",
    # We allow some magic values in the tests. It's acceptable
    "PLR2004",
    # We allow async function without await in tests
    "RUF029"
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

[tool.ruff.lint.pylint]
allow-dunder-method-names = ["__get_pydantic_core_schema__"]
max-args = 7

[tool.ruff.format]
preview = true
quote-style = "single"

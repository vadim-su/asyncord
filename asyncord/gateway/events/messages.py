from __future__ import annotations

import typing
import datetime

from pydantic import Field, BaseModel

from asyncord.snowflake import Snowflake
from asyncord.client.models import messages
from asyncord.client.models.users import User
from asyncord.gateway.events.base import GatewayEvent
from asyncord.client.models.members import Member
from asyncord.client.models.channels import Channel
from asyncord.client.models.stickers import Sticker


class MessageCreateEvent(GatewayEvent, messages.Message):
    """https://discord.com/developers/docs/topics/gateway#message-create"""

    guild_id: Snowflake | None = None
    """id of the guild the message was sent in - unless it is an ephemeral message"""

    member: MessageMember | None = None
    """member properties for this message's author - only included when the message is in a guild"""

    mentions: list[MessageUser]
    """users specifically mentioned in the message"""


class MessageUpdateEvent(GatewayEvent):
    """https://discord.com/developers/docs/topics/gateway#message-update"""

    id: Snowflake
    """id of the message"""

    channel_id: Snowflake
    """id of the channel the message was sent in"""

    author: User | None = None
    """author of the message"""

    content: str | None = None  # noqa WPS110 # Found wrong variable name
    """contents of the message"""

    timestamp: datetime.datetime | None = None
    """when this message was sent"""

    edited_timestamp: datetime.datetime | None = None
    """when this message was edited (or null if never)"""

    tts: bool | None = None
    """whether this was a TTS message"""

    mention_everyone: bool | None = None
    """whether this message mentions everyone"""

    mention_roles: list[Snowflake] | None = None
    """roles specifically mentioned in this message"""

    mention_channels: list[messages.ChannelMention] | None = None
    """channels specifically mentioned in this message"""

    attachments: list[messages.Attachment] | None = None
    """any attached files"""

    embeds: list[messages.Embed] | None = None
    """any embedded content"""

    reactions: list[messages.Reaction] | None = None
    """any reactions to the message"""

    nonce: int | str | None = None
    """used for validating a message was sent"""

    pinned: bool | None = None
    """whether this message is pinned"""

    webhook_id: Snowflake | None = None
    """if the message is generated by a webhook, this is the webhook's id"""

    type: messages.MessageType | None = None
    """type of message"""

    activity: messages.MessageActivity | None = None
    """sent with Rich Presence-related chat embeds"""

    application: messages.MessageApplication | None = None
    """sent with Rich Presence-related chat embeds"""

    application_id: Snowflake | None = None
    """if the message is an Interaction or application-owned webhook,
    this is the id of the application
    """

    message_reference: messages.MessageReference | None = None
    """reference data sent with crossposted messages"""

    flags: messages.MessageFlags | None = None
    """message flags combined as a bitfield"""

    stickers: list[Sticker] | None = None
    """message stickers"""

    referenced_message: messages.Message | None = None
    """the message this message references, if the message is a reply"""

    thread: Channel | None = None
    """the thread that was started from this message, includes thread member object"""

    components: list[messages.MessageComponent] | None = None
    """sent if the message is a response to an Interaction"""

    interaction: messages.MessageInteraction | None = None
    """sent if the message is a response to an Interaction"""

    message: str | None = None
    """error message"""

    guild_id: Snowflake | None = None
    """id of the guild the message was sent in - unless it is an ephemeral message"""

    member: MessageMember | None = None
    """member properties for this message's author - only included when the message is in a guild"""

    mentions: list[MessageUser] | None = None
    """users specifically mentioned in the message"""


class MessageDeleteEvent(GatewayEvent):
    """Sent when a message is deleted.

    https://discord.com/developers/docs/topics/gateway#message-delete
    """

    id: Snowflake
    """id of the message"""

    channel_id: Snowflake
    """the id of the channel"""

    guild_id: Snowflake | None = None
    """the id of the guild"""


class MessageDeleteBulkEvent(GatewayEvent):
    """Sent when multiple messages are deleted at once.

    https://discord.com/developers/docs/topics/gateway#message-delete-bulk
    """

    ids: list[Snowflake]
    """the ids of the messages"""

    channel_id: Snowflake
    """the id of the channel"""

    guild_id: Snowflake | None = None
    """the id of the guild"""


class MessageReactionEmoji(BaseModel):
    """https://discord.com/developers/docs/topics/gateway#message-reaction-add-message-reaction-add-event-fields"""

    name: str
    """the name of the emoji"""

    id: Snowflake | None = None
    """the id of the emoji"""

    animated: bool | None = None
    """whether this emoji is animated"""


class MessageReactionAddEvent(GatewayEvent):
    """Sent when a user adds a reaction to a message.

    https://discord.com/developers/docs/topics/gateway#message-reaction-add
    """

    user_id: Snowflake
    """the id of the user"""

    channel_id: Snowflake
    """the id of the channel"""

    message_id: Snowflake
    """the id of the message"""

    guild_id: Snowflake | None = None
    """the id of the guild"""

    member: Member | None = None
    """member properties for this reaction's user - only included when the message is in a guild"""

    emoji: MessageReactionEmoji
    """the emoji used to react"""


class MessageReactionRemoveEvent(GatewayEvent):
    """Sent when a user removes a reaction from a message.

    https://discord.com/developers/docs/topics/gateway#message-reaction-remove
    """

    user_id: Snowflake
    """the id of the user"""

    channel_id: Snowflake
    """the id of the channel"""

    message_id: Snowflake
    """the id of the message"""

    guild_id: Snowflake | None = None
    """the id of the guild"""

    emoji: MessageReactionEmoji
    """the emoji used to react"""


class MessageReactionRemoveAllEvent(GatewayEvent):
    """Sent when all reactions are explicitly removed from a message.

    https://discord.com/developers/docs/topics/gateway#message-reaction-remove-all
    """

    channel_id: Snowflake
    """the id of the channel"""

    message_id: Snowflake
    """the id of the message"""

    guild_id: Snowflake | None = None
    """the id of the guild"""


class MessageReactionRemoveEmojiEvent(GatewayEvent):
    """Sent when all reactions for a given emoji are explicitly removed from a message.

    https://discord.com/developers/docs/topics/gateway#message-reaction-remove-emoji
    """

    channel_id: Snowflake
    """the id of the channel"""

    guild_id: Snowflake | None = None
    """the id of the guild"""

    message_id: Snowflake
    """the id of the message"""

    emoji: MessageReactionEmoji
    """the emoji that was removed"""


class MessageMember(BaseModel):
    nick: str | None = None
    """this user's guild nickname"""

    avatar: str | None = None
    """the member's guild avatar hash"""

    roles: list[Snowflake]
    """array of snowflakes"""

    joined_at: datetime.datetime
    """when the user joined the guild"""

    premium_since: datetime.datetime | None = None
    """when the user started boosting the guild"""

    deaf: bool
    """whether the user is deafened in voice channels"""

    mute: bool
    """whether the user is muted in voice channels"""

    pending: bool | None = None
    """whether the user has not yet passed the guild's Membership Screening requirements"""

    communication_disabled_until: datetime.datetime | None = None
    """when the user's timeout will expire and the user will be able to communicate in the guild again.

    None or a time in the past if the user is not timed out.
    """


class MessageUser(BaseModel):
    id: Snowflake
    """The user's id."""

    username: str
    """The user's username, not unique across the platform."""

    discriminator: typing.Annotated[str, Field(min_len=4, max_len=4)]
    """The user's 4 - digit discord-tag."""

    avatar: str | None
    """The user's avatar hash."""

    avatar_decoration: str | None = None
    """The user's avatar decoration hash."""

    member: MessageMember
    """The user's member properties in the guild."""


MessageCreateEvent.update_forward_refs()
MessageUpdateEvent.update_forward_refs()
